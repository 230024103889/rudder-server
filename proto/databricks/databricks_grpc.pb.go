// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabricksClient is the client API for Databricks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabricksClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	Close(ctx context.Context, in *CloseConnectionRequest, opts ...grpc.CallOption) (*CloseConnectionResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	FetchSchemas(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchSchemasResponse, error)
	FetchTables(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTablesResponse, error)
	FetchTableAttributes(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTableAttributesResponse, error)
	FetchTotalCountInTable(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTotalCountInTableResponse, error)
}

type databricksClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabricksClient(cc grpc.ClientConnInterface) DatabricksClient {
	return &databricksClient{cc}
}

func (c *databricksClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) Close(ctx context.Context, in *CloseConnectionRequest, opts ...grpc.CallOption) (*CloseConnectionResponse, error) {
	out := new(CloseConnectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) FetchSchemas(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchSchemasResponse, error) {
	out := new(FetchSchemasResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/FetchSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) FetchTables(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTablesResponse, error) {
	out := new(FetchTablesResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/FetchTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) FetchTableAttributes(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTableAttributesResponse, error) {
	out := new(FetchTableAttributesResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/FetchTableAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databricksClient) FetchTotalCountInTable(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*FetchTotalCountInTableResponse, error) {
	out := new(FetchTotalCountInTableResponse)
	err := c.cc.Invoke(ctx, "/proto.Databricks/FetchTotalCountInTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabricksServer is the server API for Databricks service.
// All implementations must embed UnimplementedDatabricksServer
// for forward compatibility
type DatabricksServer interface {
	Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	Close(context.Context, *CloseConnectionRequest) (*CloseConnectionResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	FetchSchemas(context.Context, *ExecuteRequest) (*FetchSchemasResponse, error)
	FetchTables(context.Context, *ExecuteRequest) (*FetchTablesResponse, error)
	FetchTableAttributes(context.Context, *ExecuteRequest) (*FetchTableAttributesResponse, error)
	FetchTotalCountInTable(context.Context, *ExecuteRequest) (*FetchTotalCountInTableResponse, error)
	mustEmbedUnimplementedDatabricksServer()
}

// UnimplementedDatabricksServer must be embedded to have forward compatible implementations.
type UnimplementedDatabricksServer struct {
}

func (UnimplementedDatabricksServer) Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDatabricksServer) Close(context.Context, *CloseConnectionRequest) (*CloseConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedDatabricksServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDatabricksServer) FetchSchemas(context.Context, *ExecuteRequest) (*FetchSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSchemas not implemented")
}
func (UnimplementedDatabricksServer) FetchTables(context.Context, *ExecuteRequest) (*FetchTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTables not implemented")
}
func (UnimplementedDatabricksServer) FetchTableAttributes(context.Context, *ExecuteRequest) (*FetchTableAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTableAttributes not implemented")
}
func (UnimplementedDatabricksServer) FetchTotalCountInTable(context.Context, *ExecuteRequest) (*FetchTotalCountInTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTotalCountInTable not implemented")
}
func (UnimplementedDatabricksServer) mustEmbedUnimplementedDatabricksServer() {}

// UnsafeDatabricksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabricksServer will
// result in compilation errors.
type UnsafeDatabricksServer interface {
	mustEmbedUnimplementedDatabricksServer()
}

func RegisterDatabricksServer(s grpc.ServiceRegistrar, srv DatabricksServer) {
	s.RegisterService(&Databricks_ServiceDesc, srv)
}

func _Databricks_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).Close(ctx, req.(*CloseConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_FetchSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).FetchSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/FetchSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).FetchSchemas(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_FetchTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).FetchTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/FetchTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).FetchTables(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_FetchTableAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).FetchTableAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/FetchTableAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).FetchTableAttributes(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databricks_FetchTotalCountInTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabricksServer).FetchTotalCountInTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Databricks/FetchTotalCountInTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabricksServer).FetchTotalCountInTable(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Databricks_ServiceDesc is the grpc.ServiceDesc for Databricks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Databricks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Databricks",
	HandlerType: (*DatabricksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Databricks_Connect_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Databricks_Close_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Databricks_Execute_Handler,
		},
		{
			MethodName: "FetchSchemas",
			Handler:    _Databricks_FetchSchemas_Handler,
		},
		{
			MethodName: "FetchTables",
			Handler:    _Databricks_FetchTables_Handler,
		},
		{
			MethodName: "FetchTableAttributes",
			Handler:    _Databricks_FetchTableAttributes_Handler,
		},
		{
			MethodName: "FetchTotalCountInTable",
			Handler:    _Databricks_FetchTotalCountInTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/databricks/databricks.proto",
}
